using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using EdpConsole.Connectors;
using EdpConsole.Connectors.Usb;
using EdpConsole.Core;
using EdpConsole.Extensions;

namespace EdpConsole
{
    internal class Program
    {
        private static void Main(string[] args)
        {
            Console.WriteLine("Start");

            //based in http://velocio.net/modbus-example/
            SendMessageTest();

            Console.ReadLine();

            SendMessageTest();

            Console.ReadLine();
        }

        private static void SendMessageTest()
        {
            ThreadPool.QueueUserWorkItem(x =>
            {
                //01 - id
                //var message = new byte[] { 0x01, 0x04, 0x00, 0x04, 0x00, 0x01 };
                //0x01 0x04 0x06 0x56 0x30 0x31 0x31 0x30 0x00 0x67 0x92

                //02 - config
                //var message = new byte[] { 0x01, 0x04, 0x00, 0x80, 0x00, 0x01 };
                //response: 
                //0x01 ADDRESS
                //0x04 FUNCTION CODE
                //0x08 BYTE COUNT
                //0x01 0x02 0x09 0x0a 0x0b 0x0c 0x0d 0x0e  DATA
                //0x19 0xea CRC

                //clock
                //0x07 0xe3 0x06 0x0d 0x04 0x01 0x00 0x00 0x00 0x00 0x3c 0x80 
                //ARM Profile Status
                //0x00 
                //Active energy (+A) inc
                //0x00 0x00 0x00 0x00 
                //Active energy (-A) inc
                //0x00 0x00 0x00 0x00 
                //Reactive energy (+Ri) inc
                //0x00 0x00 0x00 0x00 
                //Reactive energy (+Rc) inc
                //0x00 0x00 0x00 0x00 
                //Reactive energy (-Ri) inc.
                //0x00 0x00 0x00 0x00 
                //Reactive energy (-Rc) inc.
                //0x00 0x00 0x00 0x00



                //0x07 0xe3 0x06 0x0d 0x04 0x01 0x0f 0x00 0x00 0x00 0x3c 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
                //0x07 0xe3 0x06 0x0d 0x04 0x01 0x00 0x00 0x00 0x00 0x3c 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
                //0x07 0xe3 0x06 0x0d 0x04 0x00 0x2d 0x00 0x00 0x00 0x3c 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
                //0x07 0xe3 0x06 0x0d 0x04 0x00 0x1e 0x00 0x00 0x00 0x3c 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
                //0x07 0xe3 0x06 0x0d 0x04 0x00 0x0f 0x00 0x00 0x00 0x3c 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
                //0x07 0xe3 0x06 0x0d 0x04 0x00 0x00 0x00 0x00 0x00 0x3c 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

                //0x07 0xe3 0x05 0x15 0x02 0x10 0x1e 0x00 0x00 0x00 0x3c 0x80 0x0c 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
                //0x07 0xe3 0x05 0x15 0x02 0x10 0x2d 0x00 0x00 0x00 0x3c 0x80 0x00 0x00 0x00 0x00 0x03 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00  
                //0x07 0xe3 0x05 0x15 0x02 0x11 0x00 0x00 0x00 0x00 0x3c 0x80 0x00 0x00 0x00 0x00 0x03 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00  
                //0x07 0xe3 0x05 0x15 0x02 0x11 0x0f 0x00 0x00 0x00 0x3c 0x80 0x00 0x00 0x00 0x00 0x03 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00  
                //0x07 0xe3 0x05 0x15 0x02 0x11 0x1e 0x00 0x00 0x00 0x3c 0x80 0x00 0x00 0x00 0x00 0x03 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00  
                //0x07 0xe3 0x05 0x15 0x02 0x11 0x2d 0x00 0x00 0x00 0x3c 0x80 0x00 0x00 0x00 0x00 0x03 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00



                //03 - value
                var message = new byte[] { 0x01, 0x44, 0x03, 0x01 };
                //0x01 0x44 0x11 
                //0x07 0xe3 0x06 0x0c 0x03 0x17 0x00 0x00 0x00 0x00 0x3c 0x80 0x00 0x00 0x00 0x00 0x00 
                //0x4b 0x7e

                //0x01 0x44 0x22 
                //0x07 0xe3 0x06 0x0c 0x03 0x17 0x1e 0x00 0x00 0x00 0x3c 0x80 0x00 0x00 0x00 0x00 0x00 
                //0x07 0xe3 0x06 0x0c 0x03 0x17 0x0f 0x00 0x00 0x00 0x3c 0x80 0x00 0x00 0x00 0x00 0x00
                // 0x05 0x07

                using (IConnector conn = new UsbConnector())
                {
                    //conn.DataReceived += Conn_DataReceived;
                    conn.Open();
                    //conn.SendMessage(ModbusMessage.StatusControl);
                    //conn.SendMessage(ModbusMessage.Clock);
                    //conn.SendMessage(ModbusMessage.ActiveCoreFirmwareId);
                    //conn.SendMessage(ModbusMessage.LoadProfileConfiguredMeasurements);
                    //conn.SendMessage(ModbusMessage.LoadProfileTotalEntries);
                    //conn.SendMessage(ModbusMessage.LastLoadProfile(MeasurementType.ActiveEnergyPositiveA));
                    //conn.SendMessage(ModbusMessage.LoadProfile(MeasurementType.ActiveEnergyPositiveA));

                    var response = conn.SendMessageAsync(ModbusMessage.StatusControl).Result;
                    Console.WriteLine($"B Received: {response}");

                    response = conn.SendMessageAsync(ModbusMessage.Clock).Result;
                    Console.WriteLine($"B Received: {response}");

                    response = conn.SendMessageAsync(ModbusMessage.StatusControl).Result;
                    Console.WriteLine($"B Received: {response}");

                    response = conn.SendMessageAsync(ModbusMessage.Clock).Result;
                    Console.WriteLine($"B Received: {response}");

                    var count = 0;
                    while (count++ < 5)
                    {
                        Thread.Sleep(1000);
                        Console.Write(".");
                    }
                }                
            });
        }

        private static void Conn_DataReceived(IConnector sender, ModbusResponse response)
        {
            //TODO: fazer os converters das response para dados legiveis
            //var year = BytesToInt(response.Data, 0, 2);

            Console.WriteLine($"Data Received: {response}");
        }

        public static int BytesToInt(List<byte> bytes, int start, int end)
        {
            if (end - start == 1)
            {
                return (int)bytes.Skip(start).Take(end).First();
            }

            var data = bytes.Skip(start).Take(end).ToArray();

            if (BitConverter.IsLittleEndian)
                Array.Reverse(data);

            if (data.Length == 2)
            {
                return BitConverter.ToInt16(data, 0);
            }
            else
            {
                return BitConverter.ToInt32(data, 0);
            }     
        }
    }
}
